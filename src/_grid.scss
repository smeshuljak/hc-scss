@import './mixins';
@import './media';

$grid-count: 12 !default;
$grid-gutters: 16px !default;

$wrapper-max-width: 1170px !default;
$wrapper-gutters: 20px !default;

@function grid-format-val($val) {
  @if $val == ltr {
    @return row;
  }
  @elseif $val == rtl {
    @return row-reverse;
  }
  @elseif $val == start {
    @return flex-start;
  }
  @elseif $val == end {
    @return flex-end;
  }
  @return $val;
}

/**
 * @gutters
 *   {number}  20px
 *   {map}     (breakpoint: 10px, breakpoint: 15px)
 *   {bool}    false
 */
@mixin grid-container($gutters: $grid-gutters) {
  @if $gutters != false {

    @if type-of($gutters) == 'number' {
      padding-left: $gutters / 2;
      padding-right: $gutters / 2;
    }
    @elseif type-of($gutters) == 'map' {
      @each $gutter in $gutters {
        $breakpoint: nth($gutter, 1);
        $padding: nth($gutter, 2);

        @if $breakpoint == 'default' {
          padding-left: $padding / 2;
          padding-right: $padding / 2;
        }
        @else {
          @include media($breakpoint) {
            padding-left: $padding / 2;
            padding-right: $padding / 2;
          }
        }
      }
    }
  }
}

/**
 * @gutters
 *   {number}  20px
 *   {map}     (breakpoint: 10px, breakpoint: 15px)
 *   {bool}    false
 *
 * @args
 *   {map}
 *      direction  rtl | ltr
 *      justify    start | end | center | space-between | space-around | space-evenly
 *      align      auto | start | end | center | baseline | stretch
 */
@mixin grid-row($gutters: $grid-gutters, $args: ()) {
  position: relative;
  box-sizing: border-box;
  display: flex;
  flex-wrap: wrap;

  @if $gutters != false {

    @if type-of($gutters) == 'number' {
      margin-left: -($gutters / 2);
      margin-right: -($gutters / 2);
    }
    @elseif type-of($gutters) == 'map' {
      @each $gutter in $gutters {
        $breakpoint: nth($gutter, 1);
        $margin: nth($gutter, 2);

        @if $breakpoint == 'default' {
          margin-left: -($margin / 2);
          margin-right: -($margin / 2);
        }
        @else {
          @include media($breakpoint) {
            margin-left: -($margin / 2);
            margin-right: -($margin / 2);
          }
        }
      }
    }
  }

  // arguments

  @if not map-has-key($args, direction) {
    flex-direction: row;
  }

  @if not map-has-key($args, justify) {
    justify-content: flex-start;
  }

  @if not map-has-key($args, align) {
    align-items: stretch;
  }

  @each $arg in $args {
    $prop: nth($arg, 1);
    $val: nth($arg, 2);

    @if $prop == direction {
      flex-direction: grid-format-val($val);
    }
    @elseif $prop == justify {
      justify-content: grid-format-val($val);
    }
    @elseif $prop == align {
      align-items: grid-format-val($val);
    }
  }
}

/**
 * @$columns
 *   {string}  auto | responsive
 *   {number}  6
 *   {map}     (small: 2, medium: 3, large: 4)
 *
 * @gutters
 *   {number}  20px
 *   {map}     (breakpoint: 10px, breakpoint: 15px)
 *   {bool}    false
 *
 * @args
 *   {map}
 *      grow     true | false
 *      order    0
 *      align    auto | start | end | center | baseline | stretch
 *      justify  start | end, center
 */
@mixin grid-column($columns: auto, $gutters: $grid-gutters, $args: ()) {
  box-sizing: border-box;

  // columns
  @if $columns == auto {
    max-width: 100%;
    flex-grow: 1;
    flex-basis: 0;
  }
  @elseif $columns == responsive {
    max-width: 100%;
    flex: 0 0 100%;

    @include media(small) {
      max-width: 50%;
      flex: 1 0 50%;
    }

    @include media(smedium) {
      max-width: 33.33%;
      flex: 1 0 33.33%;
    }

    @include media(medium) {
      max-width: 100%;
      flex-grow: 1;
      flex-basis: 0;
    }
  }
  @elseif type-of($columns) == 'map' {

    @if not map-has-key($columns, default) {
      max-width: 100%;
      flex: 0 0 100%;
    }

    @each $column in $columns {
      $breakpoint: nth($column, 1);
      $column-count: nth($column, 2);

      @if $breakpoint == 'default' {
        max-width: ($column-count / $grid-count * 100) + %;
        flex: 0 0 ($column-count / $grid-count * 100) + %;
      }
      @else {
        @include media($breakpoint) {
          max-width: ($column-count / $grid-count * 100) + %;
          flex: 0 0 ($column-count / $grid-count * 100) + %;
        }
      }
    }
  }
  @elseif type-of($columns) == 'number' {
    max-width: ($columns / $grid-count * 100) + %;
    flex: 0 0 ($columns / $grid-count * 100) + %;
  }

  // gutters
  @if $gutters == default {
    $gutters: $grid-gutters;
  }

  @if $gutters != false {

    @if type-of($gutters) == 'number' {
      padding-left: $gutters / 2;
      padding-right: $gutters / 2;
    }
    @elseif type-of($gutters) == 'map' {
      @each $gutter in $gutters {
        $breakpoint: nth($gutter, 1);
        $padding: nth($gutter, 2);

        @if $breakpoint == 'default' {
          padding-left: $padding / 2;
          padding-right: $padding / 2;
        }
        @else {
          @include media($breakpoint) {
            padding-left: $padding / 2;
            padding-right: $padding / 2;
          }
        }
      }
    }
  }

  // arguments
  @each $arg in $args {
    $prop: nth($arg, 1);
    $val: nth($arg, 2);

    @if $prop == grow {
      @if $val == false {
        flex-grow: 0;
      }
    }
    @elseif $prop == justify {
      @if $val == end {
        margin-left: auto;
      }
      @elseif $val == center {
        margin: auto;
      }
    }
    @elseif $prop == align {
      align-self: grid-format-val($val);
    }
    @else {
      #{$prop}: $val;
    }
  }
}

/**
 * @max-width
 *   {number}  20px
 *
 * @gutters
 *   {number}  20px
 *   {map}     (breakpoint: 10px, breakpoint: 15px)
 *   {bool}    false
 */
@mixin wrapper($max-width: $wrapper-max-width, $gutters: $wrapper-gutters) {
  width: 100%;
  position: relative;
  margin: auto;
  box-sizing: border-box;

  @if $max-width == default {
    $max-width: $wrapper-max-width;
  }

  @if $gutters != false {

    @if type-of($gutters) == 'number' {
      padding-left: $gutters;
      padding-right: $gutters;
      max-width: $max-width + ($gutters * 2);
    }
    @elseif type-of($gutters) == 'map' {
      @each $gutter in $gutters {
        $breakpoint: nth($gutter, 1);
        $padding: nth($gutter, 2);

        @if $breakpoint == 'default' {
          padding-left: $padding;
          padding-right: $padding;
          max-width: $max-width + ($padding * 2);
        }
        @else {
          @include media($breakpoint) {
            padding-left: $padding;
            padding-right: $padding;
          }
        }
      }
    }
  }
}